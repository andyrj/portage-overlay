diff -rupN orig-3.13.1-hardened/fs/buffer.c linux-3.13.1-hardened/fs/buffer.c
--- orig-3.13.1-hardened/fs/buffer.c	2014-02-06 17:09:13.606097663 -0800
+++ linux-3.13.1-hardened/fs/buffer.c	2014-02-06 17:10:25.786098609 -0800
@@ -2446,7 +2446,7 @@ int block_page_mkwrite(struct vm_area_st
 	 * Update file times before taking page lock. We may end up failing the
 	 * fault so this update may be superfluous but who really cares...
 	 */
-	file_update_time(vma->vm_file);
+	vma_file_update_time(vma);
 
 	ret = __block_page_mkwrite(vma, vmf, get_block);
 	sb_end_pagefault(sb);
diff -rupN orig-3.13.1-hardened/fs/proc/nommu.c linux-3.13.1-hardened/fs/proc/nommu.c
--- orig-3.13.1-hardened/fs/proc/nommu.c	2014-02-06 17:09:13.589097663 -0800
+++ linux-3.13.1-hardened/fs/proc/nommu.c	2014-02-06 17:10:25.786098609 -0800
@@ -45,7 +45,9 @@ static int nommu_region_show(struct seq_
 	file = region->vm_file;
 
 	if (file) {
-		struct inode *inode = file_inode(region->vm_file);
+		struct inode *inode;
+		file = vmr_pr_or_file(region);
+		inode = file_inode(file);
 		dev = inode->i_sb->s_dev;
 		ino = inode->i_ino;
 	}
diff -rupN orig-3.13.1-hardened/fs/proc/task_mmu.c linux-3.13.1-hardened/fs/proc/task_mmu.c
--- orig-3.13.1-hardened/fs/proc/task_mmu.c	2014-02-06 17:09:13.589097663 -0800
+++ linux-3.13.1-hardened/fs/proc/task_mmu.c	2014-02-06 17:10:25.786098609 -0800
@@ -288,7 +288,9 @@ show_map_vma(struct seq_file *m, struct
 	const char *name = NULL;
 
 	if (file) {
-		struct inode *inode = file_inode(vma->vm_file);
+		struct inode *inode;
+		file = vma_pr_or_file(vma);
+		inode = file_inode(file);
 		dev = inode->i_sb->s_dev;
 		ino = inode->i_ino;
 		pgoff = ((loff_t)vma->vm_pgoff) << PAGE_SHIFT;
@@ -1469,6 +1471,7 @@ static int show_numa_map(struct seq_file
 #endif
 
 	if (file) {
+		file = vma_pr_or_file(vma);
 		seq_printf(m, " file=");
 		seq_path(m, &file->f_path, "\n\t\\= ");
 	} else if (vma->vm_start <= mm->brk && vma->vm_end >= mm->start_brk) {
diff -rupN orig-3.13.1-hardened/fs/proc/task_nommu.c linux-3.13.1-hardened/fs/proc/task_nommu.c
--- orig-3.13.1-hardened/fs/proc/task_nommu.c	2014-02-06 17:09:13.589097663 -0800
+++ linux-3.13.1-hardened/fs/proc/task_nommu.c	2014-02-06 17:10:25.786098609 -0800
@@ -141,7 +141,9 @@ static int nommu_vma_show(struct seq_fil
 	file = vma->vm_file;
 
 	if (file) {
-		struct inode *inode = file_inode(vma->vm_file);
+		struct inode *inode;
+		file = vma_pr_or_file(file);
+		inode = file_inode(file);
 		dev = inode->i_sb->s_dev;
 		ino = inode->i_ino;
 		pgoff = (loff_t)vma->vm_pgoff << PAGE_SHIFT;
diff -rupN orig-3.13.1-hardened/include/linux/mm.h linux-3.13.1-hardened/include/linux/mm.h
--- orig-3.13.1-hardened/include/linux/mm.h	2014-02-06 17:09:12.683097651 -0800
+++ linux-3.13.1-hardened/include/linux/mm.h	2014-02-06 17:16:01.126103002 -0800
@@ -17,6 +17,9 @@
 #include <linux/pfn.h>
 #include <linux/bit_spinlock.h>
 #include <linux/shrinker.h>
+#include <linux/dcache.h>
+#include <linux/file.h>
+#include <linux/fs.h>
 
 struct mempolicy;
 struct anon_vma;
@@ -1110,6 +1113,87 @@ static inline int fixup_user_fault(struc
 }
 #endif
 
+/*
+ * Mainly for aufs which mmap(2) diffrent file and wants to print different path
+ * in /proc/PID/maps.
+ */
+/* #define AUFS_DEBUG_MMAP */
+static inline void aufs_trace(struct file *f, struct file *pr,
+                             const char func[], int line, const char func2[])
+{
+#ifdef AUFS_DEBUG_MMAP
+       if (pr)
+               pr_info("%s:%d: %s, %p\n", func, line, func2,
+                       f ? (char *)f->f_dentry->d_name.name : "(null)");
+#endif
+}
+
+static inline struct file *vmr_do_pr_or_file(struct vm_region *region,
+                                            const char func[], int line)
+{
+       struct file *f = region->vm_file, *pr = region->vm_prfile;
+       aufs_trace(f, pr, func, line, __func__);
+	return (f && pr) ? pr : f;
+}
+
+static inline void vmr_do_fput(struct vm_region *region,
+                              const char func[], int line)
+{
+       struct file *f = region->vm_file, *pr = region->vm_prfile;
+       aufs_trace(f, pr, func, line, __func__);
+       fput(f);
+       if (f && pr)
+               fput(pr);
+}
+
+static inline void vma_do_file_update_time(struct vm_area_struct *vma,
+                                          const char func[], int line)
+{
+       struct file *f = vma->vm_file, *pr = vma->vm_prfile;
+       aufs_trace(f, pr, func, line, __func__);
+       file_update_time(f);
+       if (f && pr)
+               file_update_time(pr);
+}
+
+static inline struct file *vma_do_pr_or_file(struct vm_area_struct *vma,
+                                            const char func[], int line)
+{
+       struct file *f = vma->vm_file, *pr = vma->vm_prfile;
+       aufs_trace(f, pr, func, line, __func__);
+       return (f && pr) ? pr : f;
+}
+
+static inline void vma_do_get_file(struct vm_area_struct *vma,
+                                  const char func[], int line)
+{
+       struct file *f = vma->vm_file, *pr = vma->vm_prfile;
+       aufs_trace(f, pr, func, line, __func__);
+       get_file(f);
+       if (f && pr)
+               get_file(pr);
+}
+
+static inline void vma_do_fput(struct vm_area_struct *vma,
+                              const char func[], int line)
+{
+       struct file *f = vma->vm_file, *pr = vma->vm_prfile;
+       aufs_trace(f, pr, func, line, __func__);
+       fput(f);
+       if (f && pr)
+               fput(pr);
+}
+
+#define vmr_pr_or_file(region)         vmr_do_pr_or_file(region, __func__, \
+                                                         __LINE__)
+#define vmr_fput(region)               vmr_do_fput(region, __func__, __LINE__)
+#define vma_file_update_time(vma)      vma_do_file_update_time(vma, __func__, \
+                                                               __LINE__)
+#define vma_pr_or_file(vma)            vma_do_pr_or_file(vma, __func__, \
+                                                         __LINE__)
+#define vma_get_file(vma)              vma_do_get_file(vma, __func__, __LINE__)
+#define vma_fput(vma)                  vma_do_fput(vma, __func__, __LINE__)
+
 extern ssize_t access_process_vm(struct task_struct *tsk, unsigned long addr, void *buf, size_t len, int write);
 extern ssize_t access_remote_vm(struct mm_struct *mm, unsigned long addr,
 		void *buf, size_t len, int write);
diff -rupN orig-3.13.1-hardened/include/linux/mm_types.h linux-3.13.1-hardened/include/linux/mm_types.h
--- orig-3.13.1-hardened/include/linux/mm_types.h	2014-02-06 17:09:12.686097651 -0800
+++ linux-3.13.1-hardened/include/linux/mm_types.h	2014-02-06 17:10:25.787098609 -0800
@@ -231,6 +231,7 @@ struct vm_region {
 	unsigned long	vm_top;		/* region allocated to here */
 	unsigned long	vm_pgoff;	/* the offset in vm_file corresponding to vm_start */
 	struct file	*vm_file;	/* the backing file or NULL */
+	struct file	*vm_prfile;	/* the virtual backing file or NULL */
 
 	int		vm_usage;	/* region usage count (access under nommu_region_sem) */
 	bool		vm_icache_flushed : 1; /* true if the icache has been flushed for
@@ -299,6 +300,7 @@ struct vm_area_struct {
 	unsigned long vm_pgoff;		/* Offset (within vm_file) in PAGE_SIZE
 					   units, *not* PAGE_CACHE_SIZE */
 	struct file * vm_file;		/* File we map to (can be NULL). */
+	struct file *vm_prfile;		/* shadow of vm_file */
 	void * vm_private_data;		/* was vm_pte (shared mem) */
 
 #ifndef CONFIG_MMU
diff -rupN orig-3.13.1-hardened/kernel/fork.c linux-3.13.1-hardened/kernel/fork.c
--- orig-3.13.1-hardened/kernel/fork.c	2014-02-06 17:09:12.725097651 -0800
+++ linux-3.13.1-hardened/kernel/fork.c	2014-02-06 17:13:30.839101033 -0800
@@ -379,7 +379,7 @@ static struct vm_area_struct *dup_vma(st
 		struct inode *inode = file_inode(file);
 		struct address_space *mapping = file->f_mapping;
 
-		get_file(file);
+		vma_get_file(tmp);
 		if (tmp->vm_flags & VM_DENYWRITE)
 			atomic_dec(&inode->i_writecount);
 		mutex_lock(&mapping->i_mmap_mutex);
diff -rupN orig-3.13.1-hardened/mm/filemap.c linux-3.13.1-hardened/mm/filemap.c
--- orig-3.13.1-hardened/mm/filemap.c	2014-02-06 17:09:14.132097670 -0800
+++ linux-3.13.1-hardened/mm/filemap.c	2014-02-06 17:10:25.788098609 -0800
@@ -1735,7 +1735,7 @@ int filemap_page_mkwrite(struct vm_area_
 	int ret = VM_FAULT_LOCKED;
 
 	sb_start_pagefault(inode->i_sb);
-	file_update_time(vma->vm_file);
+	vma_file_update_time(vma);
 	lock_page(page);
 	if (page->mapping != inode->i_mapping) {
 		unlock_page(page);
diff -rupN orig-3.13.1-hardened/mm/fremap.c linux-3.13.1-hardened/mm/fremap.c
--- orig-3.13.1-hardened/mm/fremap.c	2014-02-06 17:09:14.134097670 -0800
+++ linux-3.13.1-hardened/mm/fremap.c	2014-02-06 17:10:25.788098609 -0800
@@ -216,7 +216,9 @@ get_write_lock:
 			/* mmap_region may free vma; grab the info now */
 			vm_flags = vma->vm_flags;
 
+			vma_get_file(vma);
 			addr = mmap_region(file, start, size, vm_flags, pgoff);
+			vma_fput(vma);
 			fput(file);
 			if (IS_ERR_VALUE(addr)) {
 				err = addr;
diff -rupN orig-3.13.1-hardened/mm/madvise.c linux-3.13.1-hardened/mm/madvise.c
--- orig-3.13.1-hardened/mm/madvise.c	2014-02-06 17:09:14.133097670 -0800
+++ linux-3.13.1-hardened/mm/madvise.c	2014-02-06 17:10:25.788098609 -0800
@@ -358,12 +358,12 @@ static long madvise_remove(struct vm_are
 	 * vma's reference to the file) can go away as soon as we drop
 	 * mmap_sem.
 	 */
-	get_file(f);
+	vma_get_file(vma);
 	up_read(&current->mm->mmap_sem);
 	error = do_fallocate(f,
 				FALLOC_FL_PUNCH_HOLE | FALLOC_FL_KEEP_SIZE,
 				offset, end - start);
-	fput(f);
+	vma_fput(vma);
 	down_read(&current->mm->mmap_sem);
 	return error;
 }
diff -rupN orig-3.13.1-hardened/mm/memory.c linux-3.13.1-hardened/mm/memory.c
--- orig-3.13.1-hardened/mm/memory.c	2014-02-06 17:09:14.132097670 -0800
+++ linux-3.13.1-hardened/mm/memory.c	2014-02-06 17:10:25.789098609 -0800
@@ -2948,7 +2948,7 @@ reuse:
 			set_page_dirty_balance(dirty_page, page_mkwrite);
 			/* file_update_time outside page_lock */
 			if (vma->vm_file)
-				file_update_time(vma->vm_file);
+				vma_file_update_time(vma);
 		}
 		put_page(dirty_page);
 		if (page_mkwrite) {
@@ -3666,7 +3666,7 @@ static int __do_fault(struct mm_struct *
 
 		/* file_update_time outside page_lock */
 		if (vma->vm_file && !page_mkwrite)
-			file_update_time(vma->vm_file);
+			vma_file_update_time(vma);
 	} else {
 		unlock_page(vmf.page);
 		if (anon)
diff -rupN orig-3.13.1-hardened/mm/mmap.c linux-3.13.1-hardened/mm/mmap.c
--- orig-3.13.1-hardened/mm/mmap.c	2014-02-06 17:09:14.132097670 -0800
+++ linux-3.13.1-hardened/mm/mmap.c	2014-02-06 17:18:17.126104784 -0800
@@ -270,7 +270,7 @@ static struct vm_area_struct *remove_vma
 	if (vma->vm_ops && vma->vm_ops->close)
 		vma->vm_ops->close(vma);
 	if (vma->vm_file)
-		fput(vma->vm_file);
+		vma_fput(vma);
 	mpol_put(vma_policy(vma));
 	kmem_cache_free(vm_area_cachep, vma);
 	return next;
@@ -881,7 +881,7 @@ again:			remove_next = 1 + (end > next->
 	if (remove_next) {
 		if (file) {
 			uprobe_munmap(next, next->vm_start, next->vm_end);
-			fput(file);
+			vma_fput(vma);
 		}
 		if (next->anon_vma)
 			anon_vma_merge(vma, next);
@@ -1790,8 +1790,8 @@ out:
 unmap_and_free_vma:
 	if (vm_flags & VM_DENYWRITE)
 		allow_write_access(file);
+	vma_fput(vma);
 	vma->vm_file = NULL;
-	fput(file);
 
 	/* Undo any partial mapping done by a device driver. */
 	unmap_region(mm, vma, prev, vma->vm_start, vma->vm_end);
@@ -2818,7 +2818,7 @@ static int __split_vma(struct mm_struct
 		goto out_free_mpol;
 
 	if (new->vm_file)
-		get_file(new->vm_file);
+		vma_get_file(new);
 
 	if (new->vm_ops && new->vm_ops->open)
 		new->vm_ops->open(new);
@@ -2855,7 +2855,7 @@ static int __split_vma(struct mm_struct
 			if (new_m->vm_ops && new_m->vm_ops->close)
 				new_m->vm_ops->close(new_m);
 			if (new_m->vm_file)
-				fput(new_m->vm_file);
+				vma_fput(new_m);
 			mpol_put(pol);
 		}
 	}
@@ -2869,7 +2869,7 @@ static int __split_vma(struct mm_struct
 	if (new->vm_ops && new->vm_ops->close)
 		new->vm_ops->close(new);
 	if (new->vm_file)
-		fput(new->vm_file);
+		vma_fput(new);
  out_free_mpol:
 	mpol_put(vma_policy(new));
  out_free_vma:
@@ -3341,7 +3341,7 @@ struct vm_area_struct *copy_vma(struct v
 			if (anon_vma_clone(new_vma, vma))
 				goto out_free_mempol;
 			if (new_vma->vm_file)
-				get_file(new_vma->vm_file);
+				vma_get_file(new_vma);
 			if (new_vma->vm_ops && new_vma->vm_ops->open)
 				new_vma->vm_ops->open(new_vma);
 			vma_link(mm, new_vma, prev, rb_link, rb_parent);
diff -rupN orig-3.13.1-hardened/mm/msync.c linux-3.13.1-hardened/mm/msync.c
--- orig-3.13.1-hardened/mm/msync.c	2014-02-06 17:09:14.132097670 -0800
+++ linux-3.13.1-hardened/mm/msync.c	2014-02-06 17:10:25.790098609 -0800
@@ -80,10 +80,10 @@ SYSCALL_DEFINE3(msync, unsigned long, st
 		start = vma->vm_end;
 		if ((flags & MS_SYNC) && file &&
 				(vma->vm_flags & VM_SHARED)) {
-			get_file(file);
+			vma_get_file(vma);
 			up_read(&mm->mmap_sem);
 			error = vfs_fsync(file, 0);
-			fput(file);
+			vma_fput(vma);
 			if (error || start >= end)
 				goto out;
 			down_read(&mm->mmap_sem);
diff -rupN orig-3.13.1-hardened/mm/nommu.c linux-3.13.1-hardened/mm/nommu.c
--- orig-3.13.1-hardened/mm/nommu.c	2014-02-06 17:09:14.134097670 -0800
+++ linux-3.13.1-hardened/mm/nommu.c	2014-02-06 17:10:25.790098609 -0800
@@ -651,7 +651,7 @@ static void __put_nommu_region(struct vm
 		up_write(&nommu_region_sem);
 
 		if (region->vm_file)
-			fput(region->vm_file);
+			vmr_fput(region);
 
 		/* IO memory and memory shared directly out of the pagecache
 		 * from ramfs/tmpfs mustn't be released here */
@@ -809,7 +809,7 @@ static void delete_vma(struct mm_struct
 	if (vma->vm_ops && vma->vm_ops->close)
 		vma->vm_ops->close(vma);
 	if (vma->vm_file)
-		fput(vma->vm_file);
+		vma_fput(vma);
 	put_nommu_region(vma->vm_region);
 	kmem_cache_free(vm_area_cachep, vma);
 }
@@ -1366,7 +1366,7 @@ unsigned long do_mmap_pgoff(struct file
 					goto error_just_free;
 				}
 			}
-			fput(region->vm_file);
+			vmr_fput(region);
 			kmem_cache_free(vm_region_jar, region);
 			region = pregion;
 			result = start;
@@ -1442,10 +1442,10 @@ error_just_free:
 	up_write(&nommu_region_sem);
 error:
 	if (region->vm_file)
-		fput(region->vm_file);
+		vmr_fput(region);
 	kmem_cache_free(vm_region_jar, region);
 	if (vma->vm_file)
-		fput(vma->vm_file);
+		vma_fput(vma);
 	kmem_cache_free(vm_area_cachep, vma);
 	kleave(" = %d", ret);
 	return ret;
