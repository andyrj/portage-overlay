diff -rupN orig-3.11.7-hardened-r1/drivers/block/loop.c linux-3.11.7-hardened-r1/drivers/block/loop.c
--- orig-3.11.7-hardened-r1/drivers/block/loop.c	2014-01-08 20:30:33.948109569 -0800
+++ linux-3.11.7-hardened-r1/drivers/block/loop.c	2014-01-08 20:31:17.824110143 -0800
@@ -691,6 +691,24 @@ static inline int is_loop_device(struct
 	return i && S_ISBLK(i->i_mode) && MAJOR(i->i_rdev) == LOOP_MAJOR;
 }
 
+/*
+ * for AUFS
+ * no get/put for file.
+ */
+struct file *loop_backing_file(struct super_block *sb)
+{
+	struct file *ret;
+	struct loop_device *l;
+
+	ret = NULL;
+	if (MAJOR(sb->s_dev) == LOOP_MAJOR) {
+		l = sb->s_bdev->bd_disk->private_data;
+		ret = l->lo_backing_file;
+	}
+	return ret;
+}
+EXPORT_SYMBOL(loop_backing_file);
+
 /* loop sysfs attributes */
 
 static ssize_t loop_attr_show(struct device *dev, char *page,
diff -rupN orig-3.11.7-hardened-r1/fs/buffer.c linux-3.11.7-hardened-r1/fs/buffer.c
--- orig-3.11.7-hardened-r1/fs/buffer.c	2014-01-08 20:30:34.114109571 -0800
+++ linux-3.11.7-hardened-r1/fs/buffer.c	2014-01-08 20:31:17.828110144 -0800
@@ -2446,7 +2446,7 @@ int block_page_mkwrite(struct vm_area_st
 	 * Update file times before taking page lock. We may end up failing the
 	 * fault so this update may be superfluous but who really cares...
 	 */
-	file_update_time(vma->vm_file);
+	vma_file_update_time(vma);
 
 	ret = __block_page_mkwrite(vma, vmf, get_block);
 	sb_end_pagefault(sb);
diff -rupN orig-3.11.7-hardened-r1/fs/file_table.c linux-3.11.7-hardened-r1/fs/file_table.c
--- orig-3.11.7-hardened-r1/fs/file_table.c	2014-01-08 20:30:34.109109571 -0800
+++ linux-3.11.7-hardened-r1/fs/file_table.c	2014-01-08 20:31:17.825110143 -0800
@@ -36,7 +36,8 @@ struct files_stat_struct files_stat = {
 	.max_files = NR_FILE
 };
 
-DEFINE_STATIC_LGLOCK(files_lglock);
+DEFINE_LGLOCK(files_lglock);
+EXPORT_SYMBOL(files_lglock);
 
 /* SLAB cache for file structures */
 static struct kmem_cache *filp_cachep __read_mostly;
@@ -406,6 +407,8 @@ void file_sb_list_del(struct file *file)
 	}
 }
 
+EXPORT_SYMBOL(file_sb_list_del);
+
 #ifdef CONFIG_SMP
 
 /*
diff -rupN orig-3.11.7-hardened-r1/fs/inode.c linux-3.11.7-hardened-r1/fs/inode.c
--- orig-3.11.7-hardened-r1/fs/inode.c	2014-01-08 20:30:34.091109570 -0800
+++ linux-3.11.7-hardened-r1/fs/inode.c	2014-01-08 20:31:17.825110143 -0800
@@ -56,6 +56,7 @@ static struct hlist_head *inode_hashtabl
 static __cacheline_aligned_in_smp DEFINE_SPINLOCK(inode_hash_lock);
 
 __cacheline_aligned_in_smp DEFINE_SPINLOCK(inode_sb_list_lock);
+EXPORT_SYMBOL(inode_sb_list_lock);
 
 /*
  * Empty aops. Can be used for the cases where the user does not
@@ -1500,7 +1501,7 @@ static int relatime_need_update(struct v
  * This does the actual work of updating an inodes time or version.  Must have
  * had called mnt_want_write() before calling this.
  */
-static int update_time(struct inode *inode, struct timespec *time, int flags)
+int update_time(struct inode *inode, struct timespec *time, int flags)
 {
 	if (inode->i_op->update_time)
 		return inode->i_op->update_time(inode, time, flags);
@@ -1516,6 +1517,7 @@ static int update_time(struct inode *ino
 	mark_inode_dirty_sync(inode);
 	return 0;
 }
+EXPORT_SYMBOL(update_time);
 
 /**
  *	touch_atime	-	update the access time
diff -rupN orig-3.11.7-hardened-r1/fs/namespace.c linux-3.11.7-hardened-r1/fs/namespace.c
--- orig-3.11.7-hardened-r1/fs/namespace.c	2014-01-08 20:30:34.120109571 -0800
+++ linux-3.11.7-hardened-r1/fs/namespace.c	2014-01-08 20:31:17.826110143 -0800
@@ -54,6 +54,7 @@ EXPORT_SYMBOL_GPL(fs_kobj);
  * tree or hash is modified or when a vfsmount structure is modified.
  */
 DEFINE_BRLOCK(vfsmount_lock);
+EXPORT_SYMBOL(vfsmount_lock);
 
 static inline unsigned long hash(struct vfsmount *mnt, struct dentry *dentry)
 {
@@ -427,6 +428,7 @@ void __mnt_drop_write(struct vfsmount *m
 	mnt_dec_writers(real_mount(mnt));
 	preempt_enable();
 }
+EXPORT_SYMBOL_GPL(__mnt_drop_write);
 
 /**
  * mnt_drop_write - give up write access to a mount
@@ -1462,6 +1464,7 @@ int iterate_mounts(int (*f)(struct vfsmo
 	}
 	return 0;
 }
+EXPORT_SYMBOL(iterate_mounts);
 
 static void cleanup_group_ids(struct mount *mnt, struct mount *end)
 {
diff -rupN orig-3.11.7-hardened-r1/fs/notify/group.c linux-3.11.7-hardened-r1/fs/notify/group.c
--- orig-3.11.7-hardened-r1/fs/notify/group.c	2014-01-08 20:30:34.128109571 -0800
+++ linux-3.11.7-hardened-r1/fs/notify/group.c	2014-01-08 20:31:17.826110143 -0800
@@ -22,6 +22,7 @@
 #include <linux/srcu.h>
 #include <linux/rculist.h>
 #include <linux/wait.h>
+#include <linux/module.h>
 
 #include <linux/fsnotify_backend.h>
 #include "fsnotify.h"
@@ -65,6 +66,7 @@ void fsnotify_get_group(struct fsnotify_
 {
 	atomic_inc(&group->refcnt);
 }
+EXPORT_SYMBOL(fsnotify_get_group);
 
 /*
  * Drop a reference to a group.  Free it if it's through.
@@ -74,6 +76,7 @@ void fsnotify_put_group(struct fsnotify_
 	if (atomic_dec_and_test(&group->refcnt))
 		fsnotify_final_destroy_group(group);
 }
+EXPORT_SYMBOL(fsnotify_put_group);
 
 /*
  * Create a new fsnotify_group and hold a reference for the group returned.
@@ -102,6 +105,7 @@ struct fsnotify_group *fsnotify_alloc_gr
 
 	return group;
 }
+EXPORT_SYMBOL(fsnotify_alloc_group);
 
 int fsnotify_fasync(int fd, struct file *file, int on)
 {
diff -rupN orig-3.11.7-hardened-r1/fs/notify/mark.c linux-3.11.7-hardened-r1/fs/notify/mark.c
--- orig-3.11.7-hardened-r1/fs/notify/mark.c	2014-01-08 20:30:34.128109571 -0800
+++ linux-3.11.7-hardened-r1/fs/notify/mark.c	2014-01-08 20:31:17.827110144 -0800
@@ -109,6 +109,7 @@ void fsnotify_put_mark(struct fsnotify_m
 		mark->free_mark(mark);
 	}
 }
+EXPORT_SYMBOL(fsnotify_put_mark);
 
 /*
  * Any time a mark is getting freed we end up here.
@@ -191,6 +192,7 @@ void fsnotify_destroy_mark(struct fsnoti
 	fsnotify_destroy_mark_locked(mark, group);
 	mutex_unlock(&group->mark_mutex);
 }
+EXPORT_SYMBOL(fsnotify_destroy_mark);
 
 void fsnotify_set_mark_mask_locked(struct fsnotify_mark *mark, __u32 mask)
 {
@@ -275,6 +277,7 @@ err:
 
 	return ret;
 }
+EXPORT_SYMBOL(fsnotify_add_mark);
 
 int fsnotify_add_mark(struct fsnotify_mark *mark, struct fsnotify_group *group,
 		      struct inode *inode, struct vfsmount *mnt, int allow_dups)
@@ -336,6 +339,7 @@ void fsnotify_init_mark(struct fsnotify_
 	atomic_set(&mark->refcnt, 1);
 	mark->free_mark = free_mark;
 }
+EXPORT_SYMBOL(fsnotify_init_mark);
 
 static int fsnotify_mark_destroy(void *ignored)
 {
diff -rupN orig-3.11.7-hardened-r1/fs/open.c linux-3.11.7-hardened-r1/fs/open.c
--- orig-3.11.7-hardened-r1/fs/open.c	2014-01-08 20:30:34.100109571 -0800
+++ linux-3.11.7-hardened-r1/fs/open.c	2014-01-08 20:31:17.827110144 -0800
@@ -63,6 +63,7 @@ int do_truncate(struct dentry *dentry, l
 	mutex_unlock(&dentry->d_inode->i_mutex);
 	return ret;
 }
+EXPORT_SYMBOL(do_truncate);
 
 long vfs_truncate(struct path *path, loff_t length)
 {
diff -rupN orig-3.11.7-hardened-r1/fs/proc/nommu.c linux-3.11.7-hardened-r1/fs/proc/nommu.c
--- orig-3.11.7-hardened-r1/fs/proc/nommu.c	2014-01-08 20:30:34.097109571 -0800
+++ linux-3.11.7-hardened-r1/fs/proc/nommu.c	2014-01-08 20:31:17.828110144 -0800
@@ -45,7 +45,9 @@ static int nommu_region_show(struct seq_
 	file = region->vm_file;
 
 	if (file) {
-		struct inode *inode = file_inode(region->vm_file);
+		struct inode *inode;
+		file = vmr_pr_or_file(region);
+		inode = file_inode(file);
 		dev = inode->i_sb->s_dev;
 		ino = inode->i_ino;
 	}
diff -rupN orig-3.11.7-hardened-r1/fs/proc/task_mmu.c linux-3.11.7-hardened-r1/fs/proc/task_mmu.c
--- orig-3.11.7-hardened-r1/fs/proc/task_mmu.c	2014-01-08 20:30:34.096109571 -0800
+++ linux-3.11.7-hardened-r1/fs/proc/task_mmu.c	2014-01-08 20:31:17.828110144 -0800
@@ -296,7 +296,9 @@ show_map_vma(struct seq_file *m, struct
 	const char *name = NULL;
 
 	if (file) {
-		struct inode *inode = file_inode(vma->vm_file);
+		struct inode *inode;
+		file = vma_pr_or_file(vma);
+		inode = file_inode(file);
 		dev = inode->i_sb->s_dev;
 		ino = inode->i_ino;
 		pgoff = ((loff_t)vma->vm_pgoff) << PAGE_SHIFT;
@@ -1444,6 +1446,7 @@ static int show_numa_map(struct seq_file
 #endif
 
 	if (file) {
+		file = vma_pr_or_file(vma);
 		seq_printf(m, " file=");
 		seq_path(m, &file->f_path, "\n\t\\= ");
 	} else if (vma->vm_start <= mm->brk && vma->vm_end >= mm->start_brk) {
diff -rupN orig-3.11.7-hardened-r1/fs/proc/task_nommu.c linux-3.11.7-hardened-r1/fs/proc/task_nommu.c
--- orig-3.11.7-hardened-r1/fs/proc/task_nommu.c	2014-01-08 20:30:34.097109571 -0800
+++ linux-3.11.7-hardened-r1/fs/proc/task_nommu.c	2014-01-08 20:31:17.828110144 -0800
@@ -149,7 +149,9 @@ static int nommu_vma_show(struct seq_fil
 	file = vma->vm_file;
 
 	if (file) {
-		struct inode *inode = file_inode(vma->vm_file);
+		struct inode *inode;
+		file = vma_pr_or_file(file);
+		inode = file_inode(file);
 		dev = inode->i_sb->s_dev;
 		ino = inode->i_ino;
 		pgoff = (loff_t)vma->vm_pgoff << PAGE_SHIFT;
diff -rupN orig-3.11.7-hardened-r1/fs/splice.c linux-3.11.7-hardened-r1/fs/splice.c
--- orig-3.11.7-hardened-r1/fs/splice.c	2014-01-08 20:30:34.094109571 -0800
+++ linux-3.11.7-hardened-r1/fs/splice.c	2014-01-08 20:31:17.825110143 -0800
@@ -1093,8 +1093,8 @@ EXPORT_SYMBOL(generic_splice_sendpage);
 /*
  * Attempt to initiate a splice from pipe to file.
  */
-static long do_splice_from(struct pipe_inode_info *pipe, struct file *out,
-			   loff_t *ppos, size_t len, unsigned int flags)
+long do_splice_from(struct pipe_inode_info *pipe, struct file *out,
+		    loff_t *ppos, size_t len, unsigned int flags)
 {
 	ssize_t (*splice_write)(struct pipe_inode_info *, struct file *,
 				loff_t *, size_t, unsigned int);
@@ -1106,13 +1106,14 @@ static long do_splice_from(struct pipe_i
 
 	return splice_write(pipe, out, ppos, len, flags);
 }
+EXPORT_SYMBOL(do_splice_from);
 
 /*
  * Attempt to initiate a splice from a file to a pipe.
  */
-static long do_splice_to(struct file *in, loff_t *ppos,
-			 struct pipe_inode_info *pipe, size_t len,
-			 unsigned int flags)
+long do_splice_to(struct file *in, loff_t *ppos,
+		  struct pipe_inode_info *pipe, size_t len,
+		  unsigned int flags)
 {
 	ssize_t (*splice_read)(struct file *, loff_t *,
 			       struct pipe_inode_info *, size_t, unsigned int);
@@ -1132,6 +1133,7 @@ static long do_splice_to(struct file *in
 
 	return splice_read(in, ppos, pipe, len, flags);
 }
+EXPORT_SYMBOL(do_splice_to);
 
 /**
  * splice_direct_to_actor - splices data directly between two non-pipes
diff -rupN orig-3.11.7-hardened-r1/include/linux/fs.h linux-3.11.7-hardened-r1/include/linux/fs.h
--- orig-3.11.7-hardened-r1/include/linux/fs.h	2014-01-08 20:30:33.250109559 -0800
+++ linux-3.11.7-hardened-r1/include/linux/fs.h	2014-01-08 20:31:17.826110143 -0800
@@ -2590,6 +2590,7 @@ extern int inode_change_ok(const struct
 extern int inode_newsize_ok(const struct inode *, loff_t offset);
 extern void setattr_copy(struct inode *inode, const struct iattr *attr);
 
+extern int update_time(struct inode *, struct timespec *, int);
 extern int file_update_time(struct file *file);
 
 extern int generic_show_options(struct seq_file *m, struct dentry *root);
diff -rupN orig-3.11.7-hardened-r1/include/linux/mm.h linux-3.11.7-hardened-r1/include/linux/mm.h
--- orig-3.11.7-hardened-r1/include/linux/mm.h	2014-01-08 20:30:33.241109559 -0800
+++ linux-3.11.7-hardened-r1/include/linux/mm.h	2014-01-08 20:33:56.495112222 -0800
@@ -17,6 +17,9 @@
 #include <linux/pfn.h>
 #include <linux/bit_spinlock.h>
 #include <linux/shrinker.h>
+#include <linux/dcache.h>
+#include <linux/file.h>
+#include <linux/fs.h>
 
 struct mempolicy;
 struct anon_vma;
@@ -1029,6 +1032,89 @@ static inline int fixup_user_fault(struc
 }
 #endif
 
+/*
+ * Mainly for aufs which mmap(2) diffrent file and wants to print different path
+ * in /proc/PID/maps.
+ */
+/* #define AUFS_DEBUG_MMAP */
+static inline void aufs_trace(struct file *f, struct file *pr,
+                             const char func[], int line, const char func2[])
+{
+#ifdef AUFS_DEBUG_MMAP
+       if (pr)
+               pr_info("%s:%d: %s, %p\n", func, line, func2,
+                       f ? (char *)f->f_dentry->d_name.name : "(null)");
+#endif
+}
+
+static inline struct file *vmr_do_pr_or_file(struct vm_region *region,
+                                            const char func[], int line)
+{
+       struct file *f = region->vm_file, *pr = region->vm_prfile;
+       aufs_trace(f, pr, func, line, __func__);
+       return (f && pr) ? pr : f;
+}
+
+static inline void vmr_do_fput(struct vm_region *region,
+                              const char func[], int line)
+{
+       struct file *f = region->vm_file, *pr = region->vm_prfile;
+       aufs_trace(f, pr, func, line, __func__);
+       fput(f);
+       if (f && pr)
+               fput(pr);
+}
+
+static inline void vma_do_file_update_time(struct vm_area_struct *vma,
+                                          const char func[], int line)
+{
+       struct file *f = vma->vm_file, *pr = vma->vm_prfile;
+       aufs_trace(f, pr, func, line, __func__);
+       file_update_time(f);
+       if (f && pr)
+               file_update_time(pr);
+}
+
+static inline struct file *vma_do_pr_or_file(struct vm_area_struct *vma,
+                                            const char func[], int line)
+{
+       struct file *f = vma->vm_file, *pr = vma->vm_prfile;
+       aufs_trace(f, pr, func, line, __func__);
+       return (f && pr) ? pr : f;
+}
+
+static inline void vma_do_get_file(struct vm_area_struct *vma,
+                                  const char func[], int line)
+{
+       struct file *f = vma->vm_file, *pr = vma->vm_prfile;
+       aufs_trace(f, pr, func, line, __func__);
+       get_file(f);
+       if (f && pr)
+               get_file(pr);
+}
+
+static inline void vma_do_fput(struct vm_area_struct *vma,
+                              const char func[], int line)
+{
+       struct file *f = vma->vm_file, *pr = vma->vm_prfile;
+       aufs_trace(f, pr, func, line, __func__);
+       fput(f);
+       if (f && pr)
+               fput(pr);
+}
+
+#define vmr_pr_or_file(region)         vmr_do_pr_or_file(region, __func__, \
+                                                         __LINE__)
+#define vmr_fput(region)               vmr_do_fput(region, __func__, __LINE__)
+#define vma_file_update_time(vma)      vma_do_file_update_time(vma, __func__, \
+                                                               __LINE__)
+#define vma_pr_or_file(vma)            vma_do_pr_or_file(vma, __func__, \
+                                                         __LINE__)
+#define vma_get_file(vma)              vma_do_get_file(vma, __func__, __LINE__)
+#define vma_fput(vma)                  vma_do_fput(vma, __func__, __LINE__)
+
+
+
 extern ssize_t access_process_vm(struct task_struct *tsk, unsigned long addr, void *buf, size_t len, int write);
 extern ssize_t access_remote_vm(struct mm_struct *mm, unsigned long addr,
 		void *buf, size_t len, int write);
diff -rupN orig-3.11.7-hardened-r1/include/linux/mm_types.h linux-3.11.7-hardened-r1/include/linux/mm_types.h
--- orig-3.11.7-hardened-r1/include/linux/mm_types.h	2014-01-08 20:30:33.244109559 -0800
+++ linux-3.11.7-hardened-r1/include/linux/mm_types.h	2014-01-08 20:31:17.829110144 -0800
@@ -213,6 +213,7 @@ struct vm_region {
 	unsigned long	vm_top;		/* region allocated to here */
 	unsigned long	vm_pgoff;	/* the offset in vm_file corresponding to vm_start */
 	struct file	*vm_file;	/* the backing file or NULL */
+	struct file	*vm_prfile;	/* the virtual backing file or NULL */
 
 	int		vm_usage;	/* region usage count (access under nommu_region_sem) */
 	bool		vm_icache_flushed : 1; /* true if the icache has been flushed for
@@ -281,6 +282,7 @@ struct vm_area_struct {
 	unsigned long vm_pgoff;		/* Offset (within vm_file) in PAGE_SIZE
 					   units, *not* PAGE_CACHE_SIZE */
 	struct file * vm_file;		/* File we map to (can be NULL). */
+	struct file *vm_prfile;		/* shadow of vm_file */
 	void * vm_private_data;		/* was vm_pte (shared mem) */
 
 #ifndef CONFIG_MMU
diff -rupN orig-3.11.7-hardened-r1/include/linux/splice.h linux-3.11.7-hardened-r1/include/linux/splice.h
--- orig-3.11.7-hardened-r1/include/linux/splice.h	2014-01-08 20:30:33.255109560 -0800
+++ linux-3.11.7-hardened-r1/include/linux/splice.h	2014-01-08 20:31:17.826110143 -0800
@@ -92,4 +92,10 @@ extern void splice_shrink_spd(struct spl
 extern void spd_release_page(struct splice_pipe_desc *, unsigned int);
 
 extern const struct pipe_buf_operations page_cache_pipe_buf_ops;
+
+extern long do_splice_from(struct pipe_inode_info *pipe, struct file *out,
+			   loff_t *ppos, size_t len, unsigned int flags);
+extern long do_splice_to(struct file *in, loff_t *ppos,
+			 struct pipe_inode_info *pipe, size_t len,
+			 unsigned int flags);
 #endif
diff -rupN orig-3.11.7-hardened-r1/kernel/fork.c linux-3.11.7-hardened-r1/kernel/fork.c
--- orig-3.11.7-hardened-r1/kernel/fork.c	2014-01-08 20:30:33.281109560 -0800
+++ linux-3.11.7-hardened-r1/kernel/fork.c	2014-01-08 20:35:17.518113284 -0800
@@ -380,7 +380,7 @@ static struct vm_area_struct *dup_vma(st
 		struct inode *inode = file_inode(file);
 		struct address_space *mapping = file->f_mapping;
 
-		get_file(file);
+		vma_get_file(tmp);
 		if (tmp->vm_flags & VM_DENYWRITE)
 			atomic_dec(&inode->i_writecount);
 		mutex_lock(&mapping->i_mmap_mutex);
diff -rupN orig-3.11.7-hardened-r1/mm/filemap.c linux-3.11.7-hardened-r1/mm/filemap.c
--- orig-3.11.7-hardened-r1/mm/filemap.c	2014-01-08 20:30:34.151109571 -0800
+++ linux-3.11.7-hardened-r1/mm/filemap.c	2014-01-08 20:31:17.830110144 -0800
@@ -1733,7 +1733,7 @@ int filemap_page_mkwrite(struct vm_area_
 	int ret = VM_FAULT_LOCKED;
 
 	sb_start_pagefault(inode->i_sb);
-	file_update_time(vma->vm_file);
+	vma_file_update_time(vma);
 	lock_page(page);
 	if (page->mapping != inode->i_mapping) {
 		unlock_page(page);
diff -rupN orig-3.11.7-hardened-r1/mm/fremap.c linux-3.11.7-hardened-r1/mm/fremap.c
--- orig-3.11.7-hardened-r1/mm/fremap.c	2014-01-08 20:30:34.152109571 -0800
+++ linux-3.11.7-hardened-r1/mm/fremap.c	2014-01-08 20:31:17.830110144 -0800
@@ -212,11 +212,12 @@ get_write_lock:
 		 */
 		if (mapping_cap_account_dirty(mapping)) {
 			unsigned long addr;
-			struct file *file = get_file(vma->vm_file);
+			struct file *file = vma->vm_file;
 
+			vma_get_file(vma);
 			addr = mmap_region(file, start, size,
 					vma->vm_flags, pgoff);
-			fput(file);
+			vma_fput(vma);
 			if (IS_ERR_VALUE(addr)) {
 				err = addr;
 			} else {
diff -rupN orig-3.11.7-hardened-r1/mm/madvise.c linux-3.11.7-hardened-r1/mm/madvise.c
--- orig-3.11.7-hardened-r1/mm/madvise.c	2014-01-08 20:30:34.152109571 -0800
+++ linux-3.11.7-hardened-r1/mm/madvise.c	2014-01-08 20:31:17.831110144 -0800
@@ -358,12 +358,12 @@ static long madvise_remove(struct vm_are
 	 * vma's reference to the file) can go away as soon as we drop
 	 * mmap_sem.
 	 */
-	get_file(f);
+	vma_get_file(vma);
 	up_read(&current->mm->mmap_sem);
 	error = do_fallocate(f,
 				FALLOC_FL_PUNCH_HOLE | FALLOC_FL_KEEP_SIZE,
 				offset, end - start);
-	fput(f);
+	vma_fput(vma);
 	down_read(&current->mm->mmap_sem);
 	return error;
 }
diff -rupN orig-3.11.7-hardened-r1/mm/memory.c linux-3.11.7-hardened-r1/mm/memory.c
--- orig-3.11.7-hardened-r1/mm/memory.c	2014-01-08 20:30:34.151109571 -0800
+++ linux-3.11.7-hardened-r1/mm/memory.c	2014-01-08 20:31:17.831110144 -0800
@@ -2952,7 +2952,7 @@ reuse:
 			set_page_dirty_balance(dirty_page, page_mkwrite);
 			/* file_update_time outside page_lock */
 			if (vma->vm_file)
-				file_update_time(vma->vm_file);
+				vma_file_update_time(vma);
 		}
 		put_page(dirty_page);
 		if (page_mkwrite) {
@@ -3670,7 +3670,7 @@ static int __do_fault(struct mm_struct *
 
 		/* file_update_time outside page_lock */
 		if (vma->vm_file && !page_mkwrite)
-			file_update_time(vma->vm_file);
+			vma_file_update_time(vma);
 	} else {
 		unlock_page(vmf.page);
 		if (anon)
diff -rupN orig-3.11.7-hardened-r1/mm/mmap.c linux-3.11.7-hardened-r1/mm/mmap.c
--- orig-3.11.7-hardened-r1/mm/mmap.c	2014-01-08 20:30:34.151109571 -0800
+++ linux-3.11.7-hardened-r1/mm/mmap.c	2014-01-08 20:38:09.069115532 -0800
@@ -272,7 +272,7 @@ static struct vm_area_struct *remove_vma
 	if (vma->vm_ops && vma->vm_ops->close)
 		vma->vm_ops->close(vma);
 	if (vma->vm_file)
-		fput(vma->vm_file);
+		vma_fput(vma);
 	mpol_put(vma_policy(vma));
 	kmem_cache_free(vm_area_cachep, vma);
 	return next;
@@ -883,7 +883,7 @@ again:			remove_next = 1 + (end > next->
 	if (remove_next) {
 		if (file) {
 			uprobe_munmap(next, next->vm_start, next->vm_end);
-			fput(file);
+			vma_fput(vma);
 		}
 		if (next->anon_vma)
 			anon_vma_merge(vma, next);
@@ -1782,8 +1782,8 @@ out:
 unmap_and_free_vma:
 	if (correct_wcount)
 		atomic_inc(&inode->i_writecount);
+	vma_fput(vma);
 	vma->vm_file = NULL;
-	fput(file);
 
 	/* Undo any partial mapping done by a device driver. */
 	unmap_region(mm, vma, prev, vma->vm_start, vma->vm_end);
@@ -2818,7 +2818,7 @@ static int __split_vma(struct mm_struct
 		goto out_free_mpol;
 
 	if (new->vm_file)
-		get_file(new->vm_file);
+		vma_get_file(new);
 
 	if (new->vm_ops && new->vm_ops->open)
 		new->vm_ops->open(new);
@@ -2853,7 +2853,7 @@ static int __split_vma(struct mm_struct
 			if (new_m->vm_ops && new_m->vm_ops->close)
 				new_m->vm_ops->close(new_m);
 			if (new_m->vm_file)
-				fput(new_m->vm_file);
+				vma_fput(new_m);	
 			mpol_put(pol);
 		}
 	}
@@ -2867,7 +2867,7 @@ static int __split_vma(struct mm_struct
 	if (new->vm_ops && new->vm_ops->close)
 		new->vm_ops->close(new);
 	if (new->vm_file)
-		fput(new->vm_file);
+		vma_fput(new);
  out_free_mpol:
 	mpol_put(pol);
  out_free_vma:
@@ -3340,7 +3340,7 @@ struct vm_area_struct *copy_vma(struct v
 			if (anon_vma_clone(new_vma, vma))
 				goto out_free_mempol;
 			if (new_vma->vm_file)
-				get_file(new_vma->vm_file);
+				vma_get_file(new_vma);
 			if (new_vma->vm_ops && new_vma->vm_ops->open)
 				new_vma->vm_ops->open(new_vma);
 			vma_link(mm, new_vma, prev, rb_link, rb_parent);
diff -rupN orig-3.11.7-hardened-r1/mm/msync.c linux-3.11.7-hardened-r1/mm/msync.c
--- orig-3.11.7-hardened-r1/mm/msync.c	2014-01-08 20:30:34.151109571 -0800
+++ linux-3.11.7-hardened-r1/mm/msync.c	2014-01-08 20:31:17.832110144 -0800
@@ -80,10 +80,10 @@ SYSCALL_DEFINE3(msync, unsigned long, st
 		start = vma->vm_end;
 		if ((flags & MS_SYNC) && file &&
 				(vma->vm_flags & VM_SHARED)) {
-			get_file(file);
+			vma_get_file(vma);
 			up_read(&mm->mmap_sem);
 			error = vfs_fsync(file, 0);
-			fput(file);
+			vma_fput(vma);
 			if (error || start >= end)
 				goto out;
 			down_read(&mm->mmap_sem);
diff -rupN orig-3.11.7-hardened-r1/mm/nommu.c linux-3.11.7-hardened-r1/mm/nommu.c
--- orig-3.11.7-hardened-r1/mm/nommu.c	2014-01-08 20:30:34.153109571 -0800
+++ linux-3.11.7-hardened-r1/mm/nommu.c	2014-01-08 20:31:17.832110144 -0800
@@ -651,7 +651,7 @@ static void __put_nommu_region(struct vm
 		up_write(&nommu_region_sem);
 
 		if (region->vm_file)
-			fput(region->vm_file);
+			vmr_fput(region);
 
 		/* IO memory and memory shared directly out of the pagecache
 		 * from ramfs/tmpfs mustn't be released here */
@@ -809,7 +809,7 @@ static void delete_vma(struct mm_struct
 	if (vma->vm_ops && vma->vm_ops->close)
 		vma->vm_ops->close(vma);
 	if (vma->vm_file)
-		fput(vma->vm_file);
+		vma_fput(vma);
 	put_nommu_region(vma->vm_region);
 	kmem_cache_free(vm_area_cachep, vma);
 }
@@ -1366,7 +1366,7 @@ unsigned long do_mmap_pgoff(struct file
 					goto error_just_free;
 				}
 			}
-			fput(region->vm_file);
+			vmr_fput(region);
 			kmem_cache_free(vm_region_jar, region);
 			region = pregion;
 			result = start;
@@ -1442,10 +1442,10 @@ error_just_free:
 	up_write(&nommu_region_sem);
 error:
 	if (region->vm_file)
-		fput(region->vm_file);
+		vmr_fput(region);
 	kmem_cache_free(vm_region_jar, region);
 	if (vma->vm_file)
-		fput(vma->vm_file);
+		vma_fput(vma);
 	kmem_cache_free(vm_area_cachep, vma);
 	kleave(" = %d", ret);
 	return ret;
diff -rupN orig-3.11.7-hardened-r1/security/commoncap.c linux-3.11.7-hardened-r1/security/commoncap.c
--- orig-3.11.7-hardened-r1/security/commoncap.c	2014-01-08 20:30:33.278109560 -0800
+++ linux-3.11.7-hardened-r1/security/commoncap.c	2014-01-08 20:31:17.827110144 -0800
@@ -1017,9 +1017,11 @@ int cap_mmap_addr(unsigned long addr)
 	}
 	return ret;
 }
+EXPORT_SYMBOL(cap_mmap_addr);
 
 int cap_mmap_file(struct file *file, unsigned long reqprot,
 		  unsigned long prot, unsigned long flags)
 {
 	return 0;
 }
+EXPORT_SYMBOL(cap_mmap_file);
diff -rupN orig-3.11.7-hardened-r1/security/device_cgroup.c linux-3.11.7-hardened-r1/security/device_cgroup.c
--- orig-3.11.7-hardened-r1/security/device_cgroup.c	2014-01-08 20:30:33.278109560 -0800
+++ linux-3.11.7-hardened-r1/security/device_cgroup.c	2014-01-08 20:31:17.827110144 -0800
@@ -7,6 +7,7 @@
 #include <linux/device_cgroup.h>
 #include <linux/cgroup.h>
 #include <linux/ctype.h>
+#include <linux/export.h>
 #include <linux/list.h>
 #include <linux/uaccess.h>
 #include <linux/seq_file.h>
@@ -769,6 +770,7 @@ int __devcgroup_inode_permission(struct
 	return __devcgroup_check_permission(type, imajor(inode), iminor(inode),
 			access);
 }
+EXPORT_SYMBOL(__devcgroup_inode_permission);
 
 int devcgroup_inode_mknod(int mode, dev_t dev)
 {
diff -rupN orig-3.11.7-hardened-r1/security/security.c linux-3.11.7-hardened-r1/security/security.c
--- orig-3.11.7-hardened-r1/security/security.c	2014-01-08 20:30:33.276109560 -0800
+++ linux-3.11.7-hardened-r1/security/security.c	2014-01-08 20:31:17.827110144 -0800
@@ -404,6 +404,7 @@ int security_path_rmdir(struct path *dir
 		return 0;
 	return security_ops->path_rmdir(dir, dentry);
 }
+EXPORT_SYMBOL(security_path_rmdir);
 
 int security_path_unlink(struct path *dir, struct dentry *dentry)
 {
@@ -420,6 +421,7 @@ int security_path_symlink(struct path *d
 		return 0;
 	return security_ops->path_symlink(dir, dentry, old_name);
 }
+EXPORT_SYMBOL(security_path_symlink);
 
 int security_path_link(struct dentry *old_dentry, struct path *new_dir,
 		       struct dentry *new_dentry)
@@ -428,6 +430,7 @@ int security_path_link(struct dentry *ol
 		return 0;
 	return security_ops->path_link(old_dentry, new_dir, new_dentry);
 }
+EXPORT_SYMBOL(security_path_link);
 
 int security_path_rename(struct path *old_dir, struct dentry *old_dentry,
 			 struct path *new_dir, struct dentry *new_dentry)
@@ -446,6 +449,7 @@ int security_path_truncate(struct path *
 		return 0;
 	return security_ops->path_truncate(path);
 }
+EXPORT_SYMBOL(security_path_truncate);
 
 int security_path_chmod(struct path *path, umode_t mode)
 {
@@ -453,6 +457,7 @@ int security_path_chmod(struct path *pat
 		return 0;
 	return security_ops->path_chmod(path, mode);
 }
+EXPORT_SYMBOL(security_path_chmod);
 
 int security_path_chown(struct path *path, kuid_t uid, kgid_t gid)
 {
@@ -460,6 +465,7 @@ int security_path_chown(struct path *pat
 		return 0;
 	return security_ops->path_chown(path, uid, gid);
 }
+EXPORT_SYMBOL(security_path_chown);
 
 int security_path_chroot(struct path *path)
 {
@@ -536,6 +542,7 @@ int security_inode_readlink(struct dentr
 		return 0;
 	return security_ops->inode_readlink(dentry);
 }
+EXPORT_SYMBOL(security_inode_readlink);
 
 int security_inode_follow_link(struct dentry *dentry, struct nameidata *nd)
 {
@@ -550,6 +557,7 @@ int security_inode_permission(struct ino
 		return 0;
 	return security_ops->inode_permission(inode, mask);
 }
+EXPORT_SYMBOL(security_inode_permission);
 
 int security_inode_setattr(struct dentry *dentry, struct iattr *attr)
 {
@@ -672,6 +680,7 @@ int security_file_permission(struct file
 
 	return fsnotify_perm(file, mask);
 }
+EXPORT_SYMBOL(security_file_permission);
 
 int security_file_alloc(struct file *file)
 {
@@ -732,6 +741,7 @@ int security_mmap_file(struct file *file
 		return ret;
 	return ima_file_mmap(file, prot);
 }
+EXPORT_SYMBOL(security_mmap_file);
 
 int security_mmap_addr(unsigned long addr)
 {
